#!/bin/bash
set -e

echo "üîê [pre-commit] Gitleaks scan started..."

# 1. Check if Gitleaks is enabled in Git config
ENABLED=$(git config --bool gitleaks.enable || echo "true")
if [ "$ENABLED" != "true" ]; then
  echo "üîï Gitleaks is disabled via git config (gitleaks.enable=false)"
  exit 0
fi

# 2. Ensure gitleaks is installed
if ! command -v gitleaks &> /dev/null; then
  echo "‚ùå Gitleaks is not installed or not in PATH."
  echo "   Please run ./install-gitleaks-hook.sh"
  exit 1
fi

# 3. Show version
echo "üì¶ Gitleaks version: $(gitleaks version)"

# 4. Get staged files
FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -v "^\.git/" || true)

if [ -z "$FILES" ]; then
  echo "‚ÑπÔ∏è No staged files to scan."
  exit 0
fi

echo "üìÇ Scanning stage files:"
echo "$FILES"

# 5. Determine whether to use config file
CONFIG_ARG=""
if [ -f ".gitleaks.toml" ]; then
  echo "‚öôÔ∏è  Using .gitleaks.toml config"
  CONFIG_ARG="--config .gitleaks.toml"
fi

# 6. Scan each file individually
HAS_LEAKS=0

for file in $FILES; do
  if [ -f "$file" ]; then
    echo "üîç Scanning $file"
    if ! gitleaks detect --no-git --source "$file" $CONFIG_ARG --no-banner --redact > /dev/null; then
      echo "‚ùó Potential secrets found in: $file"
      HAS_LEAKS=1
    fi
  fi
done

# 7. Result
if [ "$HAS_LEAKS" -ne 0 ]; then
  echo "‚ùå Commit blocked: Gitleaks detected potential secrets."
  echo "‚ÑπÔ∏è  You can disable this hook with: git config gitleaks.enable false"
  exit 1
fi

echo "‚úÖ No secrets found. Proceeding with commit."
exit 0
